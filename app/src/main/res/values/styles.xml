<resources>

    <!-- Base application theme. -->
    <style name="AppTheme" parent="Theme.AppCompat.Light.DarkActionBar">
        <!-- Customize your theme here. -->
        <item name="colorPrimary">@color/colorPrimary</item>
        <item name="colorPrimaryDark">@color/colorPrimaryDark</item>
        <item name="colorAccent">@color/colorAccent</item>
    </style>

    <style name="AppTheme.AppBarOverlay" parent="ThemeOverlay.AppCompat.Dark.ActionBar" />

    <style name="AppTheme.PopupOverlay" parent="ThemeOverlay.AppCompat.Light" />

    <style name="AppTheme.NoActionBar">
        <item name="windowActionBar">false</item>
        <item name="windowNoTitle">true</item>
    </style>
    <!--自定义样式,在layout文件中引用的时候@style/自定义样式的name,parent是指定继承样式,只能指定系统内置的样式-->
    <!--自定义样式是将系统样式统一封装的方式-->
    <style name="cus_color">
        <item name="android:hint">请等待....</item>
        <item name="android:layout_height">500dp</item>
    </style>
    <!--不用parent,直接继承cus_color的样式,并且自定义属于自己的样式,调用的时候@style/cus_color.font-->
    <!--若有多级样式属性,可写多级-->
    <style name="cus_color.font">
        <item name="android:hint">请等待....</item>
        <item name="android:layout_height">500dp</item>
    </style>

    <!--自定义通用样式,可选父类,可选系统参数以及系统值-->
    <style name="parentStyle">
        <item name="android:layout_height">fill_parent</item>
        <item name="android:layout_width">fill_parent</item>
    </style>

    <!--通用样式下的子样式,也可以用上面那种方法,直接点-->
    <style name="childStyle" parent="parentStyle">
        <item name="android:color">#ddd000</item>
        <item name="android:textSize">16sp</item>
    </style>

    <!--自定义主题,不仅可以修改宽高,还可以修改全屏,动作条等-->
    <!--?后面紧跟另外一种样式代表,当前样式随着跟随的样式改变而改变-->
    <style name="custheme">
        <item name="android:windowActionBar">true</item>
        <item name="android:windowFullscreen">?android:windowActionBar</item>
    </style>
</resources>
